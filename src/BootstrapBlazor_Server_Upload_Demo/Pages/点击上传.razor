@page "/点击上传"
@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Options
<h3>点击上传</h3>
<div class="row g-3">
    <div class="col-12 col-sm-6">
        <p>点击 <code>浏览按钮</code> 选择文件上传，本例中设置 <code>IsMultiple=true</code> 可多选文件进行上传</p>
        <ButtonUpload TValue="string" IsMultiple="true" ShowProgress="true"
                      OnChange="@OnClickToUpload" OnDelete="@(fileName => Task.FromResult(true))">
        </ButtonUpload>
    </div>
</div>
<p class="mt-3">设置 <code>IsSingle</code> 时，仅可以上传一张图片或者文件</p>
<ButtonUpload TValue="string" IsSingle="true" OnChange="@OnClickToUpload"
              OnDelete="@(fileName => Task.FromResult(true))" class="mt-3">
</ButtonUpload>
<p class="mt-3">设置 <code>ShowUploadList</code> 值为 <b>false</b> 组件即与普通按钮一样，可自行处理上传文件逻辑</p>
<ButtonUpload TValue="string" OnChange="@OnClickToUploadNoUploadList" ShowUploadFileList="false"
              BrowserButtonText="Upload" BrowserButtonIcon="fa-solid fa-cloud-arrow-up" class="mt-3">
</ButtonUpload>

@code {

    [Inject]
    [NotNull]
    private ToastService? ToastService { get; set; }

    private async Task OnClickToUploadNoUploadList(UploadFile file)
    {
        await SaveToFile(file);
        await ToastService.Success("Upload", $"{file.OriginFileName} uploaded success.");
    }

    private async Task OnClickToUpload(UploadFile file)
    {
        await SaveToFile(file);
    }

    private string _baseDir = "UploadFiles\\";
    private CancellationTokenSource? ReadToken { get; set; }
    private static long MaxFileLength => 200 * 1024 * 1024;

    private async Task<bool> SaveToFile(UploadFile file)
    {
    // Server Side 使用
    // Web Assembly 模式下必须使用 webapi 方式去保存文件到服务器或者数据库中
    // 生成写入文件名称
        var ret = false;
        file.FileName = $"{Path.GetFileNameWithoutExtension(file.OriginFileName)}-{DateTimeOffset.Now:yyyyMMddHHmmss}{Path.GetExtension(file.OriginFileName)}";
        var fileName = Path.Combine(_baseDir, file.FileName);

        ReadToken ??= new CancellationTokenSource();
        ret = await file.SaveToFile(fileName, MaxFileLength, ReadToken.Token);

        if (ret)
        {
            // 保存成功
            file.PrevUrl = $"{_baseDir}{file.FileName}";
        }
        else
        {
            file.Code = 1;
        }
        return ret;
    }

}